---
name: Create release pull pull_request
on: workflow_dispatch
permissions: {}
jobs:
  check-first-release:
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      latestTag: ${{steps.check-tag.outputs.latestTag}}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          fetch-depth: 0
      - run: |
          latestTag=$(git describe --abbrev=0 --tags)
          echo "latestTag=$latestTag" >> "$GITHUB_OUTPUT"
        id: check-tag
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "::error title=Valid git tags not found::$ERROR_MESSAGE"
        if: ${{failure()}}
        env:
          ERROR_MESSAGE: |
            e.g. git tag -a v0.0.0 -m 'v0.0.0' $(git rev-list --max-parents=0 HEAD) && git push origin v0.0.0

  # error-latest-tag:
  #   runs-on: ubuntu-latest
  #   permissions: {}
  #   if: failure()
  #   needs: check-first-release
  #   steps:
  #     - run: echo "::error title=Valid git tags not found::$ERROR_MESSAGE"
  #       env:
  #         ERROR_MESSAGE: |
  #           e.g. git tag -a v0.0.0 -m 'v0.0.0' $(git rev-list --max-parents=0 HEAD) && git push origin v0.0.0
  # bump-version:
  #   needs: check-first-release
  #   runs-on: ubuntu-latest
  #   permissions: {}
  #   if: success()
  #   steps:
  #     - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
  #       with:
  #         fetch-depth: 0
  #     - run: |
  #         echo "fromDate=$(git log -1 --format=%aI ${{needs.check-first-release.outputs.latestTag}})" >> $GITHUB_ENV
  #         echo "toDate=$(git log -1 --format=%aI ${{ github.event.repository.default_branch }})" >> $GITHUB_ENV
  #     - run: |
  #         labels=$(gh pr list --search merged:$fromDate..$toDate --json labels,number --jq '.[] | .labels[].name')
  #         echo $labels
  #         bash ./scripts/bump.sh $labels
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-changelog:
    needs: check-first-release
    runs-on: ubuntu-latest
    permissions: {}
    if: success()
    outputs:
      changelog: ${{steps.github_release.outputs.changelog}}
    steps:
      # - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      #   with:
      #     fetch-depth: 0
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v4.0.0-b02
        with:
          fromTag: ${{needs.check-first-release.outputs.latestTag}}
          toTag: ${{ github.ref }}
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  bump-version:
    needs: build-changelog
    runs-on: ubuntu-latest
    permissions: {}
    if: success()
    outputs:
      releaseVersion: ${{steps.set-version.outputs.releaseVersion}}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: aquaproj/aqua-installer@294926f94b4233f202a2f03875c604f840cfed70 # v2.1.1
        with:
          aqua_version: v2.8.0
      - run: |
          set -eu
          changelog="${{needs.build-changelog.outputs.changelog}}"
          search_features="## 🚀 Features"
          search_breaking_changes="## ⚠️ Breaking Changes"

          if [[ "$changelog" == *"$search_features"* ]]; then
              release_level="minor"
          elif [[ "$changelog" == *"$search_breaking_changes"* ]]; then
              release_level="major"
          else
              release_level="patch"
          fi

          echo "level=$release_level" >> $GITHUB_ENV
      - run: echo "releaseVersion=$(svu $level)" >> $GITHUB_OUTPUT
        id: set-version
  check-milestone:
    needs: bump-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - run: |
          set -eu
          milestones=$(gh api -X GET /repos/${GITHUB_REPOSITORY}/milestones -f state=all)
          if ! $(echo "${milestones}" | jq ". | any(.title == \"$RELEASE_VERSION\")"); then
            gh api -X POST repos/${GITHUB_REPOSITORY}/milestones -f title=$RELEASE_VERSION}
          elif $(echo "${milestones}" | jq ". | any(.title == \"$RELEASE_VERSION\" and .state == \"closed\")"); then
            milestone_number=$(echo "${milestones}" | jq ". | map(select(.title == \"$RELEASE_VERSION\")) | first | .number")
            gh api -X PATCH repos/${GITHUB_REPOSITORY}/milestones/${milestone_number} -f state=open
          fi
        env:
          GITHUB_TOKEN: ${{github.token}}
          RELEASE_VERSION: ${{needs.bump-version.outputs.releaseVersion}}
  generate-pull-request:
    needs: [build-changelog, bump-version, check-milestone]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: aquaproj/aqua-installer@294926f94b4233f202a2f03875c604f840cfed70 # v2.1.1
        with:
          aqua_version: v2.8.0
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0
        with:
          app_id: ${{secrets.gh_app_id}}
          private_key: ${{secrets.gh_app_private_key}}
      - run: |
          set -eu
          ghcp -v
          SAME_PR_COUNT=$(gh pr list -B $GITHUB_REF_NAME -H release/$RELEASE_VERSION --json 'id' --jq '.[] | length')
          if [[ -z "$SAME_PR_COUNT" ]]; then
            ghcp empty-commit -r $GITHUB_REPOSITORY -b release/$RELEASE_VERSION -m 'chore: empty commit to open follow up pull request'
            gh pr create -B $GITHUB_REF_NAME -H release/$RELEASE_VERSION --title $RELEASE_VERSION --body "$CHANGELOG" --reviewer murn0 --milestone $RELEASE_VERSION
          else
            SAME_PR_NUMBER=$(gh pr list -B $GITHUB_REF_NAME -H release/$RELEASE_VERSION --json 'number' --jq '.[].number')
            gh pr edit $SAME_PR_NUMBER --title '$RELEASE_VERSION [edit]' --body "$CHANGELOG" --milestone $RELEASE_VERSION
          fi
        env:
          GITHUB_TOKEN: ${{steps.generate_token.outputs.token}}
          CHANGELOG: ${{needs.build-changelog.outputs.changelog}}
          RELEASE_VERSION: ${{needs.bump-version.outputs.releaseVersion}}
  # get-current-version:
  #   outputs:
  #     current_version: ${{steps.current.outputs.current_version}}
  #   runs-on: ubuntu-latest
  #   permissions: {}
  #   steps:
  #     - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
  #       id: current
  #     - run: |
  #         bash scripts/get-current-version.sh
  #         ls -la
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         BUMP_LEVEL: ${{ inputs.level }}
  # bump-new-version:
  #   runs-on: ubuntu-latest
  #   needs: get-current-version
  #   permissions: {}
  #   steps:
  #     - uses: aquaproj/aqua-installer@294926f94b4233f202a2f03875c604f840cfed70 # v2.1.1
  #       with:
  #         aqua_version: v2.8.0
  #       env:
  #         AQUA_GITHUB_TOKEN: ${{github.token}}
  #     - run: ls -la
  #       env:
  #         BUMP_LEVEL: ${{inputs.level}}
  #         current_version: ${{needs.get-current-version.outputs.current_version}}
  #         AQUA_GITHUB_TOKEN: ${{github.token}}
  # create-release-pull-request:
  #   runs-on: ubuntu-latest
  #   permissions: {}
  #   steps:
  #     - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
  #     - run: |
  #         gh pr create --head 
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}